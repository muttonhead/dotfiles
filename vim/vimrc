" Be iMproved dammit
set nocompatible
filetype off
set noswapfile

" Unicode
set encoding=utf8

" tags
:set tags=./tags

" Vundle
set rtp+=~/.vim/bundle/Vundle.vim
call vundle#begin()

" Plugins
Plugin 'gmarik/Vundle.vim'
Plugin 'scrooloose/nerdtree'
Plugin 'scrooloose/nerdcommenter'
Plugin 'vim-scripts/taglist.vim'
Plugin 'marcus/autotag.vim'
Plugin 'tpope/vim-fugitive'
Plugin 'airblade/vim-gitgutter'
Plugin 'ivalkeen/vim-simpledb'
Plugin 'maciakl/vim-neatstatus'
Plugin 'Valloric/YouCompleteMe'
Plugin 'muttonhead/vim-maven-utils'
Plugin 'tpope/vim-surround'
Plugin 'altercation/vim-colors-solarized'
Plugin 'rking/ag.vim'
Plugin 'SirVer/ultisnips.git'
Plugin 'honza/vim-snippets.git'
Plugin 'ervandew/supertab'
Plugin 'kien/ctrlp.vim.git'
Plugin 'd11wtq/ctrlp_bdelete.vim.git'
Plugin 'tfnico/vim-gradle'
call vundle#end()
filetype plugin indent on

" Ctrl-P
" let g:ctrlp_map = '<Leader>t'
nnoremap <C-b> :CtrlPBuffer<CR>
set wildignore=*.swp,*.class,*.jar,*.png,*.jpeg,*.jpg,**/target/**
let g:ctrlp_match_window = 'bottom,order:ttb,min:1,max:30,results:30'
let g:ctrlp_max_files= 0
let g:ctrlp_by_filename = 1
call ctrlp_bdelete#init()

" Nerd Tree
nnoremap <silent> <C-N> :NERDTreeToggle<CR>
let g:NERDTreeDirArrows=0
let g:NERDTreeWinSize=50

" minibufexpl
let g:miniBufExplMapWindowNavVim = 1
nnoremap <silent> H :bprev<CR>
nnoremap <silent> L :bnext<CR>
nnoremap <C-J> <C-W><C-J>
nnoremap <C-K> <C-W><C-K>
nnoremap <C-L> <C-W><C-L>
nnoremap <C-H> <C-W><C-H>

" taglist
nnoremap <silent> <C-O> :TlistToggle<CR>
let Tlist_WinWidth = 60

" solarized colors
syntax enable
:set background=dark
colorscheme solarized

" YouCompleteMe
inoremap <expr> <C-j> ("\<C-n>")
inoremap <expr> <C-k> ("\<C-p>")

" ag
ca Ag Ag!

" post vundle thing
filetype plugin indent on

" tab setup
:set tabstop=4
:set cindent
:set shiftwidth=4

" highlight cursor line
set cursorline

" show linenumbers
:set number
:set relativenumber

" keep cursor away from edge
set so=15

" column width
:set colorcolumn=100

" map leader to ,
:let mapleader = ","

" dont auto // comment 
au FileType * setlocal comments-=:// comments+=f://

" make K bring up javadoc
:map <silent> K :help <c-r><c-w> <bar> only <CR>

" map space to write
:map <space> :w<CR>

" search for current word
nnoremap <silent><Leader>a :Ag! <cword><cr>
nnoremap <silent><Leader>j :Ag! <cword> --java<cr>

" quickfix
nnoremap <silent><Leader>n :cn<cr>

" Allow JSX in normal JS files
let g:jsx_ext_required = 0

" read a .vim.local
if filereadable( ".vim.local" ) 
	so .vim.local
endif

" make YCM compatible with UltiSnips (using supertab)
let g:ycm_key_list_select_completion = ['<C-j>', '<Down>']
let g:ycm_key_list_previous_completion = ['<C-k>', '<Up>']
let g:SuperTabDefaultCompletionType = '<C-n>'

" better key bindings for UltiSnipsExpandTrigger
let g:UltiSnipsExpandTrigger = "<tab>"
let g:UltiSnipsJumpForwardTrigger = "<tab>"
let g:UltiSnipsJumpBackwardTrigger = "<s-tab>"
let g:UltiSnipsEditSplit="vertical"
let g:UltiSnipsSnippetsDir="~/.vim/bundle/vim-snippets/UltiSnips/"

" Building {{{
fu! SetJava()
	silent !sudo archlinux-java set java-8-jdk
endfu
"}}}}

" Sets build variables for gradle
fu! SetGradle()
	set makeprg=gradle\ --daemon\ --quiet
	set efm=
				\%W%f:%l:\ warning:\ %m,
				\%E%f:%l:\ error:\ %m,
				\%C%p^,
				\%C\ %#%m,
				\%-G%.%#
endfu

" Sets build variables for Apache maven
fu! SetMaven()
	set makeprg=mvn\ -q\ -Djava.awt.headless=true\ -PskipTests
	set efm=
				\%W[WARNING]\ %f:[%l\\,%c]\ %m,
				\%E[ERROR]\ %f:[%l\\,%c]\ %m,
				\%C\ %#symbol:\ %.%#\ %m,
				\%Z\ %#location:\ %.%#,
				\%C[ERROR]\ symbol:\ %.%#\ %m,
				\%Z[ERROR]\ location:\ %.%#,
				\%C[ERROR]\ %#required:\ %#%m,
				\%Z[ERROR]\ found:\ %#%m,
				\%Z\ %#found:\ %#%m,
				\%-Z%.%#,
				\[ERROR]\ %f:[%l]\ %m,
				\%-G%.%#,
endfu

" Build the closest project to the current file with maven or gradle
:map <leader>b :call Build(0)<cr>
:map <leader>clb :call Build(1)<cr>:call Build(0)<cr>
function! Build(clean)
	let l:dir = expand('%:p:h')
	let l:pom = l:dir . "/pom.xml"
	let l:gradle = l:dir . "/build.gradle"
	let l:gradle_settings = l:dir . "/settings.gradle"
	while ! filereadable(l:pom) && ! filereadable(l:gradle) && ! filereadable(l:gradle_settings)
		let l:dir = fnamemodify(l:dir, ':h')
		if 1 == strlen(l:dir)
			echo "Could not find pom.xml, build.xml, build.gradle, or settings.gradle"
			return
		endif
		let l:pom = l:dir . "/pom.xml"
		let l:gradle = l:dir . "/build.gradle"
		let l:gradle_settings = l:dir . "/settings.gradle"
	endwhile

	if filereadable(l:pom)
		call SetMaven()
		let l:args = "-f " . l:pom 
	elseif filereadable(l:gradle_settings)
		call SetGradle();
		let l:args = "-b " . l:gradle_settings 
	elseif filereadable(l:gradle)
		call SetGradle();
		let l:args = "-b " . l:gradle 
	endif

	if a:clean
		let l:args = l:args . " clean"
	endif
	exe "make " . l:args . " install"
endfunction
"}}}
